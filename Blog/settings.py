"""
Django settings for Portal project.

Generated by 'django-admin startproject' using Django 1.11.3.
"""
import os
from collections import OrderedDict

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'your_secret_key'

# 已安装的Apps
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sitemaps',
    'django_summernote',
    'django_cleanup',
    'constance',
    'constance.backends.database',
    'common',
    'user',
    'article',
    'news',
    'banner',
    'navbar',
    'column',
    'link',
    'notification',
]

# 中间件
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# 主路由
ROOT_URLCONF = 'Blog.urls'

# 模板
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Blog.wsgi.application'

# 密码验证
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        # 密码要求最短为8位
        'OPTIONS': {
            'min_length': 8,
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# 数据库 MySQL
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'blog',
        'USER': 'user',
        'PASSWORD': 'password',
        'HOST': '127.0.0.1',
        'POST': '3306',
    }
}

# 安全警告：生产环境中不可置DEBUG为True
DEBUG = True
# 域名
DOMAIN = 'blog.dreamgotech.com'

# 允许访问的主机
ALLOWED_HOSTS = ['*'] if DEBUG else [DOMAIN]

# 汉语 上海时区
LANGUAGE_CODE = 'zh-hans'
TIME_ZONE = 'Asia/Shanghai'
# 国际化支持
USE_I18N = True
USE_L10N = True
# 存储至数据库不使用UTC时间
USE_TZ = False

# 设置user model
AUTH_USER_MODEL = "user.User"
# 分页配置
PAGE_NUM = 8

# 静态文件 (CSS, JavaScript, Images)
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, '/')
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, "static"),
)

# 用户上传文件
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


# summer_note 文件上传路径
def uploaded_file_path(instance, filename):
    from common.utils import get_time_filename
    return 'summer_note/{}'.format(get_time_filename(filename))


# summer note配置
SUMMERNOTE_CONFIG = {
    'width': '100%',
    'lang': 'zh-CN',
    'attachment_upload_to': uploaded_file_path,
    'attachment_require_authentication': True,
    'js_for_inplace': (
        '/static/manage/js/summernote.js',
    ),
}

# constance设置
CONSTANCE_BACKEND = 'constance.backends.database.DatabaseBackend'
CONSTANCE_IGNORE_ADMIN_VERSION_CHECK = True
# 设置缓存
CONSTANCE_DATABASE_CACHE_BACKEND = 'memcache'

WEBSITE_TITLE = '网站标题'
WEBSITE_WELCOME = '网站欢迎词'
WEBSITE_SEO_KEYWORD = '网站SEO关键词'
WEBSITE_SEO_DESCRIPTION = '网站SEO描述'

CONSTANCE_CONFIG = OrderedDict([
    (WEBSITE_TITLE, ('诗远启博客', WEBSITE_TITLE)),
    (WEBSITE_WELCOME, ('欢迎来到DreamGo', WEBSITE_TITLE)),
    (WEBSITE_SEO_KEYWORD, ('', WEBSITE_TITLE)),
    (WEBSITE_SEO_DESCRIPTION, ('', WEBSITE_TITLE)),
])
CONSTANCE_CONFIG_FIELDSETS = OrderedDict([
    ('站点设置', (WEBSITE_TITLE, WEBSITE_WELCOME)),
    ('SEO设置', (WEBSITE_SEO_KEYWORD, WEBSITE_SEO_DESCRIPTION)),
])

# cache配置
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
        'KEY_PREFIX': 'dreamgo_blog',
        'options': {
            'MAX_ENTRIES': 1024,
        }
    },
    'memcache': {
        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
        'LOCATION': '127.0.0.1:11211',
        'KEY_PREFIX': 'dreamgo_blog',
        'options': {
            'MAX_ENTRIES': 1024,
        }
    },
}

# Email配置
# 如果想要支持ssl (比如qq邮箱) 见 https://github.com/bancek/django-smtp-ssl
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.mxhichina.com'  # SMTP地址 例如: smtp.163.com
EMAIL_PORT = 587  # SMTP端口 例如: 25
EMAIL_HOST_USER = ''  # 邮箱账户
EMAIL_HOST_PASSWORD = ''  # 邮箱密码\授权码
EMAIL_SUBJECT_PREFIX = u'DreamgoBlog'  # 为邮件Subject-line前缀,默认是'[django]'
EMAIL_USE_TLS = False  # 与SMTP服务器通信时，是否启动TLS链接(安全链接)。默认是false
DEFAULT_FROM_EMAIL = 'DreamGo<verify@dreamgo.tech>'

# 输出日志
LOG_PATH = os.path.join(BASE_DIR, "log/")
DJANGO_LOG_PATH = LOG_PATH + 'django.log'
INFO_LOG_PATH = LOG_PATH + 'info.log'
DJANGO_LOG = os.path.dirname(DJANGO_LOG_PATH)
INFO_LOG = os.path.dirname(INFO_LOG_PATH)

if not os.path.exists(DJANGO_LOG):
    os.mkdir(DJANGO_LOG)
if not os.path.exists(INFO_LOG):
    os.mkdir(INFO_LOG)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'formatters': {
        'standard': {
            'format': '%(asctime)s [%(levelname)s]- %(message)s'}
        # 日志格式
    },
    'handlers': {
        'django_error': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': LOG_PATH + 'django.log',
            'formatter': 'standard'
        },
        'info': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': LOG_PATH + 'info.log',
            'formatter': 'standard'
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'standard'
        }
    },
    'loggers': {
        'info': {
            'handlers': ['info', "console"],
            'level': 'DEBUG',
            'propagate': True
        },
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },
        'django.request': {
            'handlers': ['django_error', 'console'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'django.db.backends': {
            'handlers': ['console'],
            'level': 'ERROR',
            'propagate': True,
        }
    },
}
